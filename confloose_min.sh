#!/bin/bash
COLOR_RED="\e[31m"
COLOR_GREEN="\e[32m"
COLOR_BLINK="\e[5m"
COLOR_RESET="\e[0m"

err_to_erase=0
actions=()
options=()

display_actions()
{
    echo "Actions:"
    echo -e "  1) ${COLOR_BLINK}run${COLOR_RESET}"
    i=2
    IFS=""
    for action in ${actions[@]}; do
        index=$((i - 2))

        # Color
        if [ ${options[$index]} -eq 0 ]; then
            echo -ne "$COLOR_RED"
        else
            echo -ne "$COLOR_GREEN"
        fi

        # Text
        echo -n "  $i) $action"

        # Reset
        echo -e "$COLOR_RESET"
        i=$((i + 1))
    done
    echo
    echo "  0) cancel"
    echo
}

erase_stdout()
{
    amount="$1"
    while [ $amount -gt 0 ]; do
        tput cuu1
        tput el
        amount=$((amount - 1))
    done
    err_to_erase=0
}

prompt_options()
{
    # Reset variables
    err_to_erase=0
    actions=()
    options=()

    # Extract given data
    while [ $# -gt 0 ]; do
        actions+=("$1")
        options+=("$2")
        shift 2
    done

    actions_count="${#actions[@]}"

    display_actions

    while true; do
        # Ask for input
        echo -n "Select:"
        read selected

        # Check input is numeric
        re='^[0-9]+$'
        if ! [[ $selected =~ $re ]] ; then
            echo "error: Not a number" >&2
            selected=-1
            continue
        fi

        # Check input is in bounds
        if [ $((selected - 1)) -gt $actions_count ]; then
            echo "error: Input value too high"
            selected=-1
            err_to_erase=$((err_to_erase + 2))
            continue
        fi

        # Handle exit option (value 0)
        if [ $selected -eq 0 ]; then
            echo "Canceled!"
            return 1
        fi

        # Handle run option
        if [ $selected -eq 1 ]; then
            echo "Running..."
            break
        fi

        # Switch option
        curr_index=$((selected - 2))
        curr_option=${options[$curr_index]}
        options[$curr_index]=$(((curr_option + 1) % 2))

        # Override display
        erase_stdout $((6 + actions_count + err_to_erase))
        display_actions
    done
}
write_to_rc()
{
    _write_to_rc()
    {
        tee -a ~/.bashrc ~/.bash_profile 2>&1 1>/dev/null
    }

    _write_to_rc <<< $(echo "# === Confloose === #")
    _write_to_rc <&0
    _write_to_rc <<< $(echo "# ================= #")
}
run_alias_mixer () {
prompt_options || return 1

write_to_rc <<-EOF
export PS1="[\u@\h ~/lock/before/you/leave]\$ "

alias cd="cd ."
alias ls="sl"
alias pwd="echo /"
alias mv="echo stay"
alias cp="Use Ctrl-c/Ctrl-v instead."
alias touch="echo Hey, don't touch that!"

alias bash="echo Are you looking for Jean-Sébastien?"
alias sh="echo -bash: sh: command not found"
alias unalias="echo no aliases found"

alias less="stat"
alias cat="echo"

alias ping="echo pong"
alias man="echo Hey bro', what's up?"

alias make="echo Segmentation fault"
alias python="echo I am SO afraid of snakes..."

alias kill="echo *dies*"
alias top="echo No process running. Shutdown in 10sec."
alias reboot="Nope."
alias clear="tree ."

alias emacs="vim"
alias vim="emacs"
alias gvim="emacs"
alias vi="emacs"
alias nano="echo Why are you hurting yourself? Use ed instead!"
alias ed="echo Why are you hurting yourself? Use gedit instead!"
alias gedit="echo Why are you hurting yourself? Use nano instead!"

alias i3lock="echo I see... So now, you are locking uh?"
alias exit="echo Are you sure?"

alias alias="sleep 5"
EOF
}
run_big_brother () {
prompt_options || return 1

# In the following, we need to add the ascii to the rc files.
# Since the backtick (`) character will be evaluated, we need to backslash
# it (\`). But, since it is itself in a heredoc, we need to add the missing
# backslash so that it can be executed from the rc files (\\\`).

write_to_rc <<-EOF
cat <<-BIG_BROTHER_EOF

                             __..--.._
      .....              .--~  .....  \\\`.
    .":    "\\\`-..  .    .' ..-'"    :". \\\`
    \\\` \\\`._ \\\` _.'\\\`"(     \\\`-"'\\\`._ ' _.' '
         ~~~      \\\`.          ~~~
                  .'
                 /
                (
                 ^---'

        BIG BROTHER IS WATCHING YOU

BIG_BROTHER_EOF
EOF
}
run_gifileptic () {
prompt_options "disable input" 0 "disable ctrl+c" 0 || return 1

# === VARIABLES === #
SCREEN=$(xrandr | grep " connected" | cut -d" " -f1);
NO_INPUT=${options[0]}
FORCE=${options[1]}


# === FUNCTIONS === #
force_workspace()
{
    i3-msg "workspace 42";
}

show_image()
{
    if ! pgrep -x "firefox" > /dev/null; then
        firefox --new-window "http://htmlpreview.github.io/?https://raw.githubusercontent.com/MarcVillain/Confloose/master/webpages/Lock.html" 2>&1>/dev/null & disown
    fi
}

full_screen_firefox()
{
    i3-msg '[title=".*Mozilla Firefox"] fullscreen enable; [title=".*Mozilla Firefox"] move workspace 42' 2>&1>/dev/null
}

random_gamma()
{
    randR=$(($RANDOM%2))
    randG=$(($RANDOM%2))
    randB=$(($RANDOM%2))

    xrandr --output $SCREEN --gamma $randR:$randG:$randB 2>&1>/dev/null
}

prevent_mouse()
{
    while read -r line; do
        xinput disable $line;
    done < <(xinput | grep Mouse | tr -d " " | tr "\t" " " | cut -d" " -f2 | cut -d"=" -f2)
}

prevent_keyboard()
{
    while read -r line; do
        xinput disable $line;
    done < <(xinput | grep Keyboard | tr -d " " | tr "\t" " " | cut -d" " -f2 | cut -d"=" -f2)
}

# === MAIN === #
main()
{
    if [ $NO_INPUT -eq 1 ]; then
        prevent_mouse;
        prevent_keyboard;
    fi

    pkill -9 firefox

    while true; do
        force_workspace
        show_image
        random_gamma
        full_screen_firefox
        if [ -n ${DEBUG+x} ]; then
            break
        fi
    done
}

# === RUN === #
if [ $FORCE -eq 0 ]; then
    echo "Press ctrl+c to exit."
    main 2>&1>/dev/null
else
    main 2>&1>/dev/null & disown
fi
}
run_random_eject () {
prompt_options || return 1

write_to_rc <<-EOF
random_eject()
{
    if [ \$(( RANDOM % 9 )) -eq 0 ]; then
        eject -T
    fi
}

PROMPT_COMMAND="random_eject; \$PROMPT_COMMAND"
EOF
}
run_say_please () {
prompt_options || return 1

write_to_rc <<-EOF
say_please()
{
    while true; do
        echo -n "Say please: "
        read answer

        if [ "\$answer" == "please" ]; then
            break
        fi
    done
}

export PROMPT_COMMAND="say_please; \$PROMPT_COMMAND"
EOF
}
scripts=(alias_mixer
big_brother
gifileptic
random_eject
say_please)
scripts_count=${#scripts[@]}

# Display all scripts
display_scripts()
{
    echo "Scripts:"
    i=1
    for script in ${scripts[@]}; do
        echo "  $i) $script"
        i=$((i+1))
    done
    echo
    echo "  0) quit"
    echo
}

display_scripts

while true; do
    # Ask for input
    echo -n "Select: "
    read selected

    # Check input is numeric
    re='^[0-9]+$'
    if ! [[ $selected =~ $re ]] ; then
        echo "error: Not a number" >&2
        selected=-1
        continue
    fi

    # Check input is in bounds
    if [ $selected -gt $scripts_count ]; then
        echo "error: Input value too high"
        selected=-1
        continue
    fi

    # Handle exit option (value 0)
    if [ $selected -eq 0 ]; then
        break
    fi

    echo "-----"
    index=$((selected - 1))
    eval "run_${scripts[$index]}"

    echo "-----"
    display_scripts
done

